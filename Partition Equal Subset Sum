Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.


def canPartition(arr):
    total_sum = sum(arr)
    
    # If the total sum is odd, it cannot be divided into two equal-sum parts
    if total_sum % 2 != 0:
        return "NO"
    
    half_sum = total_sum // 2
    n = len(arr)
    
    # Create a 2D DP array with dimensions (n + 1) x (half_sum + 1)
    dp = [[False for _ in range(half_sum + 1)] for _ in range(n + 1)]
    
    # Initialize the first row as True, since an empty set is always possible with a sum of 0
    for i in range(n + 1):
        dp[i][0] = True
    
    # Fill the DP array
    for i in range(1, n + 1):
        for j in range(1, half_sum + 1):
            dp[i][j] = dp[i - 1][j]
            if arr[i - 1] <= j:
                dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]]
    
    return "YES" if dp[n][half_sum] else "NO"

# Example usage
arr = [1, 5, 11, 5]
result = canPartition(arr)
print(result)  # Output: "YES"
